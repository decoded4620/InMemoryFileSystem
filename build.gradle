plugins {
    id 'java' // adds 'test' task
    id 'idea'
    id 'application'
    id 'jacoco'
}
ext {
    javaMainClass = System.getProperty("entryPoint")
}

application {
    mainClassName = javaMainClass
}

repositories {
    mavenCentral()
}
afterEvaluate {
    if (ext.javaMainClass != null && ext.javaMainClass.indexOf("Client")) {
        System.out.println("Taking input from System.in")
        run {
            standardInput = System.in
        }
    }
}

dependencies {
    implementation 'org.slf4j:slf4j-api:1.7.31'
    implementation 'org.slf4j:slf4j-log4j12:1.7.31'
    implementation 'commons-codec:commons-codec:1.15'
    testImplementation 'org.junit.jupiter:junit-jupiter-params:5.7.2'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.7.2'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.7.2'
}

test {
    // set heap size for the test JVM(s)
    minHeapSize = "128m"
    maxHeapSize = "4096m"

    useJUnitPlatform()
    finalizedBy jacocoTestReport // report is always generated after tests run
}

jacocoTestReport {
    dependsOn test // tests are required to run before generating the report
    reports {
        xml.required = false
        csv.required = false
        html.outputLocation = layout.buildDirectory.dir('jacocoHtml')
    }
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                minimum = 0.22
            }
        }

        rule {
            enabled = false
            element = 'CLASS'
            includes = ['org.gradle.*']

            limit {
                counter = 'LINE'
                value = 'TOTALCOUNT'
                maximum = 0.3
            }
        }
    }
}